openapi: 3.0.0
info:
  title: Online Education System APIs
  version: 1.0.0
  description: All API endpoints using POST method

servers:
  - url: https://online-education-system-quch.onrender.com/api

paths:
  # Authentication Endpoints
  /auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      summary: Verify user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
        '401':
          description: Invalid verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Verification error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Email not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Login error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/send-code:
    post:
      summary: Send verification or reset code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendCodeRequest'
      responses:
        '201':
          description: Code sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Email not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Account not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error sending code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
        '401':
          description: Invalid verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Account not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Password reset error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Course Endpoints
  /course/add:
    post:
      summary: Add a new course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCourseRequest'
      responses:
        '201':
          description: Course added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /course/edit:
    post:
      summary: Edit an existing course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCourseRequest'
      responses:
        '201':
          description: Course edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /course/delete:
    post:
      summary: Delete a course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCourseRequest'
      responses:
        '201':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /course/get/all:
    post:
      summary: Get all courses with pagination
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCoursesRequest'
      responses:
        '201':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursesResponse'

  /course/get:
    post:
      summary: Get a specific course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCourseRequest'
      responses:
        '201':
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'

  /course/library/add:
    post:
      summary: Add course to user's library
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        '201':
          description: Course added to library
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /course/library/delete:
    post:
      summary: Remove course from user's library
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        '201':
          description: Course removed from library
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /course/library/get/all:
    post:
      summary: Get all courses in user's library
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Library retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryResponse'

  # File Endpoints
  /file/upload:
    post:
      summary: Upload a file (video or PDF)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'

  /file/stream:
    post:
      summary: Stream a file (video or PDF)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
                  example: "/uploads/videos/lesson1.mp4"
              required:
                - filePath
      responses:
        '200':
          description: File streamed successfully
          content:
            video/mp4:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Request Schemas
    SignupRequest:
      type: object
      properties:
        name:
          type: string
          example: "Ali Ahmed"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "P@ssw0rd123"
        role:
          type: string
          enum: ["student", "teacher", "admin"]
          example: "student"
        gender:
          type: string
          enum: ["male", "female"]
          example: "male"
      required:
        - name
        - email
        - password
        - role
        - gender

    VerifyEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        code:
          type: integer
          example: 12345
      required:
        - email
        - code

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "P@ssw0rd123"
      required:
        - email
        - password

    SendCodeRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        typeCode:
          type: string
          enum: ["verify", "reset"]
          example: "verify"
      required:
        - email
        - typeCode

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        code:
          type: integer
          example: 12345
        newPassword:
          type: string
          example: "NewP@ssw0rd123"
      required:
        - email
        - code
        - newPassword

    AddCourseRequest:
      type: object
      properties:
        title:
          type: string
          example: "Introduction to Programming"
        description:
          type: string
          example: "Learn programming basics"
        category:
          type: string
          example: "Programming"
        videoPath:
          type: string
          example: "/videos/intro.mp4"
        pdfPath:
          type: string
          example: "/pdfs/intro.pdf"
      required:
        - title
        - description
        - category

    EditCourseRequest:
      type: object
      properties:
        courseID:
          type: string
          example: "64c9a8e5f7d4b83d9c7d3e8f"
        title:
          type: string
          example: "Advanced Programming"
        description:
          type: string
          example: "Advanced programming concepts"
      required:
        - courseID
        - title
        - description

    DeleteCourseRequest:
      type: object
      properties:
        courseID:
          type: string
          example: "64c9a8e5f7d4b83d9c7d3e8f"
      required:
        - courseID

    GetCoursesRequest:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
      required:
        - page
        - limit

    GetCourseRequest:
      type: object
      properties:
        courseID:
          type: string
          example: "64c9a8e5f7d4b83d9c7d3e8f"
      required:
        - courseID

    LibraryRequest:
      type: object
      properties:
        courseID:
          type: string
          example: "64c9a8e5f7d4b83d9c7d3e8f"
      required:
        - courseID

    # Response Schemas
    MessageResponse:
      type: object
      properties:
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        error:
          type: string

    VerifyResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        isBlocked:
          type: boolean

    FileUploadResponse:
      type: object
      properties:
        message:
          type: string
        type:
          type: string
          enum: ["video", "pdf"]
        path:
          type: string
        size:
          type: integer

    Course:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        teacherID:
          type: string
        category:
          type: string
        description:
          type: string
        videoPath:
          type: string
        pdfPath:
          type: string

    CourseResponse:
      type: object
      properties:
        course:
          type: object
          properties:
            _id:
              type: string
            title:
              type: string
            teacherID:
              type: string
            category:
              type: string
            description:
              type: string
            videoPath:
              type: string
            pdfPath:
              type: string
            isInLibrary:
              type: boolean

    CoursesResponse:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    LibraryResponse:
      type: object
      properties:
        myLibrary:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'

    LibraryItem:
      type: object
      properties:
        _id:
          type: string
        userID:
          type: string
        courseID:
          type: string